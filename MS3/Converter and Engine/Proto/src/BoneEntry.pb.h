// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BoneEntry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BoneEntry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BoneEntry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Vec3Data.pb.h"
#include "QuatData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BoneEntry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BoneEntry_2eproto {
  static const uint32_t offsets[];
};
class BoneEntry_proto;
struct BoneEntry_protoDefaultTypeInternal;
extern BoneEntry_protoDefaultTypeInternal _BoneEntry_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BoneEntry_proto* Arena::CreateMaybeMessage<::BoneEntry_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BoneEntry_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:BoneEntry_proto) */ {
 public:
  inline BoneEntry_proto() : BoneEntry_proto(nullptr) {}
  ~BoneEntry_proto() override;
  explicit PROTOBUF_CONSTEXPR BoneEntry_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoneEntry_proto(const BoneEntry_proto& from);
  BoneEntry_proto(BoneEntry_proto&& from) noexcept
    : BoneEntry_proto() {
    *this = ::std::move(from);
  }

  inline BoneEntry_proto& operator=(const BoneEntry_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoneEntry_proto& operator=(BoneEntry_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoneEntry_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoneEntry_proto* internal_default_instance() {
    return reinterpret_cast<const BoneEntry_proto*>(
               &_BoneEntry_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoneEntry_proto& a, BoneEntry_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(BoneEntry_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoneEntry_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoneEntry_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoneEntry_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoneEntry_proto& from);
  void MergeFrom(const BoneEntry_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoneEntry_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BoneEntry_proto";
  }
  protected:
  explicit BoneEntry_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kQFieldNumber = 2,
    kTFieldNumber = 3,
  };
  // optional .Vec3Data_proto S = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const ::Vec3Data_proto& s() const;
  PROTOBUF_NODISCARD ::Vec3Data_proto* release_s();
  ::Vec3Data_proto* mutable_s();
  void set_allocated_s(::Vec3Data_proto* s);
  private:
  const ::Vec3Data_proto& _internal_s() const;
  ::Vec3Data_proto* _internal_mutable_s();
  public:
  void unsafe_arena_set_allocated_s(
      ::Vec3Data_proto* s);
  ::Vec3Data_proto* unsafe_arena_release_s();

  // optional .QuatData_proto Q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::QuatData_proto& q() const;
  PROTOBUF_NODISCARD ::QuatData_proto* release_q();
  ::QuatData_proto* mutable_q();
  void set_allocated_q(::QuatData_proto* q);
  private:
  const ::QuatData_proto& _internal_q() const;
  ::QuatData_proto* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::QuatData_proto* q);
  ::QuatData_proto* unsafe_arena_release_q();

  // optional .Vec3Data_proto T = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Vec3Data_proto& t() const;
  PROTOBUF_NODISCARD ::Vec3Data_proto* release_t();
  ::Vec3Data_proto* mutable_t();
  void set_allocated_t(::Vec3Data_proto* t);
  private:
  const ::Vec3Data_proto& _internal_t() const;
  ::Vec3Data_proto* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Vec3Data_proto* t);
  ::Vec3Data_proto* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:BoneEntry_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Vec3Data_proto* s_;
    ::QuatData_proto* q_;
    ::Vec3Data_proto* t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BoneEntry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoneEntry_proto

// optional .Vec3Data_proto S = 1;
inline bool BoneEntry_proto::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.s_ != nullptr);
  return value;
}
inline bool BoneEntry_proto::has_s() const {
  return _internal_has_s();
}
inline const ::Vec3Data_proto& BoneEntry_proto::_internal_s() const {
  const ::Vec3Data_proto* p = _impl_.s_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3Data_proto&>(
      ::_Vec3Data_proto_default_instance_);
}
inline const ::Vec3Data_proto& BoneEntry_proto::s() const {
  // @@protoc_insertion_point(field_get:BoneEntry_proto.S)
  return _internal_s();
}
inline void BoneEntry_proto::unsafe_arena_set_allocated_s(
    ::Vec3Data_proto* s) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.s_);
  }
  _impl_.s_ = s;
  if (s) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BoneEntry_proto.S)
}
inline ::Vec3Data_proto* BoneEntry_proto::release_s() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vec3Data_proto* temp = _impl_.s_;
  _impl_.s_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3Data_proto* BoneEntry_proto::unsafe_arena_release_s() {
  // @@protoc_insertion_point(field_release:BoneEntry_proto.S)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vec3Data_proto* temp = _impl_.s_;
  _impl_.s_ = nullptr;
  return temp;
}
inline ::Vec3Data_proto* BoneEntry_proto::_internal_mutable_s() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.s_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3Data_proto>(GetArenaForAllocation());
    _impl_.s_ = p;
  }
  return _impl_.s_;
}
inline ::Vec3Data_proto* BoneEntry_proto::mutable_s() {
  ::Vec3Data_proto* _msg = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:BoneEntry_proto.S)
  return _msg;
}
inline void BoneEntry_proto::set_allocated_s(::Vec3Data_proto* s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.s_);
  }
  if (s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s));
    if (message_arena != submessage_arena) {
      s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.s_ = s;
  // @@protoc_insertion_point(field_set_allocated:BoneEntry_proto.S)
}

// optional .QuatData_proto Q = 2;
inline bool BoneEntry_proto::_internal_has_q() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_ != nullptr);
  return value;
}
inline bool BoneEntry_proto::has_q() const {
  return _internal_has_q();
}
inline const ::QuatData_proto& BoneEntry_proto::_internal_q() const {
  const ::QuatData_proto* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::QuatData_proto&>(
      ::_QuatData_proto_default_instance_);
}
inline const ::QuatData_proto& BoneEntry_proto::q() const {
  // @@protoc_insertion_point(field_get:BoneEntry_proto.Q)
  return _internal_q();
}
inline void BoneEntry_proto::unsafe_arena_set_allocated_q(
    ::QuatData_proto* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = q;
  if (q) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BoneEntry_proto.Q)
}
inline ::QuatData_proto* BoneEntry_proto::release_q() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::QuatData_proto* temp = _impl_.q_;
  _impl_.q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QuatData_proto* BoneEntry_proto::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:BoneEntry_proto.Q)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::QuatData_proto* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::QuatData_proto* BoneEntry_proto::_internal_mutable_q() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.q_ == nullptr) {
    auto* p = CreateMaybeMessage<::QuatData_proto>(GetArenaForAllocation());
    _impl_.q_ = p;
  }
  return _impl_.q_;
}
inline ::QuatData_proto* BoneEntry_proto::mutable_q() {
  ::QuatData_proto* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:BoneEntry_proto.Q)
  return _msg;
}
inline void BoneEntry_proto::set_allocated_q(::QuatData_proto* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.q_);
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q));
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.q_ = q;
  // @@protoc_insertion_point(field_set_allocated:BoneEntry_proto.Q)
}

// optional .Vec3Data_proto T = 3;
inline bool BoneEntry_proto::_internal_has_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_ != nullptr);
  return value;
}
inline bool BoneEntry_proto::has_t() const {
  return _internal_has_t();
}
inline const ::Vec3Data_proto& BoneEntry_proto::_internal_t() const {
  const ::Vec3Data_proto* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3Data_proto&>(
      ::_Vec3Data_proto_default_instance_);
}
inline const ::Vec3Data_proto& BoneEntry_proto::t() const {
  // @@protoc_insertion_point(field_get:BoneEntry_proto.T)
  return _internal_t();
}
inline void BoneEntry_proto::unsafe_arena_set_allocated_t(
    ::Vec3Data_proto* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BoneEntry_proto.T)
}
inline ::Vec3Data_proto* BoneEntry_proto::release_t() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vec3Data_proto* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3Data_proto* BoneEntry_proto::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:BoneEntry_proto.T)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vec3Data_proto* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Vec3Data_proto* BoneEntry_proto::_internal_mutable_t() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3Data_proto>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Vec3Data_proto* BoneEntry_proto::mutable_t() {
  ::Vec3Data_proto* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:BoneEntry_proto.T)
  return _msg;
}
inline void BoneEntry_proto::set_allocated_t(::Vec3Data_proto* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t));
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:BoneEntry_proto.T)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BoneEntry_2eproto
