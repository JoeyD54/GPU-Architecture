// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FontData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FontData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FontData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "FontEntry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FontData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FontData_2eproto {
  static const uint32_t offsets[];
};
class FontData_proto;
struct FontData_protoDefaultTypeInternal;
extern FontData_protoDefaultTypeInternal _FontData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FontData_proto* Arena::CreateMaybeMessage<::FontData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FontData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:FontData_proto) */ {
 public:
  inline FontData_proto() : FontData_proto(nullptr) {}
  ~FontData_proto() override;
  explicit PROTOBUF_CONSTEXPR FontData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontData_proto(const FontData_proto& from);
  FontData_proto(FontData_proto&& from) noexcept
    : FontData_proto() {
    *this = ::std::move(from);
  }

  inline FontData_proto& operator=(const FontData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontData_proto& operator=(FontData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FontData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontData_proto* internal_default_instance() {
    return reinterpret_cast<const FontData_proto*>(
               &_FontData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FontData_proto& a, FontData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(FontData_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FontData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FontData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FontData_proto& from);
  void MergeFrom(const FontData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontData_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FontData_proto";
  }
  protected:
  explicit FontData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoFontEntryFieldNumber = 2,
    kNumKeysFieldNumber = 1,
  };
  // repeated .FontEntry_proto poFontEntry = 2;
  int pofontentry_size() const;
  private:
  int _internal_pofontentry_size() const;
  public:
  void clear_pofontentry();
  ::FontEntry_proto* mutable_pofontentry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FontEntry_proto >*
      mutable_pofontentry();
  private:
  const ::FontEntry_proto& _internal_pofontentry(int index) const;
  ::FontEntry_proto* _internal_add_pofontentry();
  public:
  const ::FontEntry_proto& pofontentry(int index) const;
  ::FontEntry_proto* add_pofontentry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FontEntry_proto >&
      pofontentry() const;

  // optional uint32 numKeys = 1;
  bool has_numkeys() const;
  private:
  bool _internal_has_numkeys() const;
  public:
  void clear_numkeys();
  uint32_t numkeys() const;
  void set_numkeys(uint32_t value);
  private:
  uint32_t _internal_numkeys() const;
  void _internal_set_numkeys(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FontData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FontEntry_proto > pofontentry_;
    uint32_t numkeys_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FontData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FontData_proto

// optional uint32 numKeys = 1;
inline bool FontData_proto::_internal_has_numkeys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FontData_proto::has_numkeys() const {
  return _internal_has_numkeys();
}
inline void FontData_proto::clear_numkeys() {
  _impl_.numkeys_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t FontData_proto::_internal_numkeys() const {
  return _impl_.numkeys_;
}
inline uint32_t FontData_proto::numkeys() const {
  // @@protoc_insertion_point(field_get:FontData_proto.numKeys)
  return _internal_numkeys();
}
inline void FontData_proto::_internal_set_numkeys(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.numkeys_ = value;
}
inline void FontData_proto::set_numkeys(uint32_t value) {
  _internal_set_numkeys(value);
  // @@protoc_insertion_point(field_set:FontData_proto.numKeys)
}

// repeated .FontEntry_proto poFontEntry = 2;
inline int FontData_proto::_internal_pofontentry_size() const {
  return _impl_.pofontentry_.size();
}
inline int FontData_proto::pofontentry_size() const {
  return _internal_pofontentry_size();
}
inline ::FontEntry_proto* FontData_proto::mutable_pofontentry(int index) {
  // @@protoc_insertion_point(field_mutable:FontData_proto.poFontEntry)
  return _impl_.pofontentry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FontEntry_proto >*
FontData_proto::mutable_pofontentry() {
  // @@protoc_insertion_point(field_mutable_list:FontData_proto.poFontEntry)
  return &_impl_.pofontentry_;
}
inline const ::FontEntry_proto& FontData_proto::_internal_pofontentry(int index) const {
  return _impl_.pofontentry_.Get(index);
}
inline const ::FontEntry_proto& FontData_proto::pofontentry(int index) const {
  // @@protoc_insertion_point(field_get:FontData_proto.poFontEntry)
  return _internal_pofontentry(index);
}
inline ::FontEntry_proto* FontData_proto::_internal_add_pofontentry() {
  return _impl_.pofontentry_.Add();
}
inline ::FontEntry_proto* FontData_proto::add_pofontentry() {
  ::FontEntry_proto* _add = _internal_add_pofontentry();
  // @@protoc_insertion_point(field_add:FontData_proto.poFontEntry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FontEntry_proto >&
FontData_proto::pofontentry() const {
  // @@protoc_insertion_point(field_list:FontData_proto.poFontEntry)
  return _impl_.pofontentry_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FontData_2eproto
