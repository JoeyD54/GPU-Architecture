// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BoneEntry.proto

#include "BoneEntry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR BoneEntry_proto::BoneEntry_proto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/nullptr
  , /*decltype(_impl_.q_)*/nullptr
  , /*decltype(_impl_.t_)*/nullptr} {}
struct BoneEntry_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoneEntry_protoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoneEntry_protoDefaultTypeInternal() {}
  union {
    BoneEntry_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoneEntry_protoDefaultTypeInternal _BoneEntry_proto_default_instance_;

// ===================================================================

class BoneEntry_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<BoneEntry_proto>()._impl_._has_bits_);
  static const ::Vec3Data_proto& s(const BoneEntry_proto* msg);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::QuatData_proto& q(const BoneEntry_proto* msg);
  static void set_has_q(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vec3Data_proto& t(const BoneEntry_proto* msg);
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Vec3Data_proto&
BoneEntry_proto::_Internal::s(const BoneEntry_proto* msg) {
  return *msg->_impl_.s_;
}
const ::QuatData_proto&
BoneEntry_proto::_Internal::q(const BoneEntry_proto* msg) {
  return *msg->_impl_.q_;
}
const ::Vec3Data_proto&
BoneEntry_proto::_Internal::t(const BoneEntry_proto* msg) {
  return *msg->_impl_.t_;
}
void BoneEntry_proto::clear_s() {
  if (_impl_.s_ != nullptr) _impl_.s_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BoneEntry_proto::clear_q() {
  if (_impl_.q_ != nullptr) _impl_.q_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void BoneEntry_proto::clear_t() {
  if (_impl_.t_ != nullptr) _impl_.t_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BoneEntry_proto::BoneEntry_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BoneEntry_proto)
}
BoneEntry_proto::BoneEntry_proto(const BoneEntry_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BoneEntry_proto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , decltype(_impl_.t_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_s()) {
    _this->_impl_.s_ = new ::Vec3Data_proto(*from._impl_.s_);
  }
  if (from._internal_has_q()) {
    _this->_impl_.q_ = new ::QuatData_proto(*from._impl_.q_);
  }
  if (from._internal_has_t()) {
    _this->_impl_.t_ = new ::Vec3Data_proto(*from._impl_.t_);
  }
  // @@protoc_insertion_point(copy_constructor:BoneEntry_proto)
}

inline void BoneEntry_proto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , decltype(_impl_.t_){nullptr}
  };
}

BoneEntry_proto::~BoneEntry_proto() {
  // @@protoc_insertion_point(destructor:BoneEntry_proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoneEntry_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.s_;
  if (this != internal_default_instance()) delete _impl_.q_;
  if (this != internal_default_instance()) delete _impl_.t_;
}

void BoneEntry_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoneEntry_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:BoneEntry_proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.s_ != nullptr);
      _impl_.s_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.q_ != nullptr);
      _impl_.q_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.t_ != nullptr);
      _impl_.t_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BoneEntry_proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Vec3Data_proto S = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_s(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .QuatData_proto Q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vec3Data_proto T = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoneEntry_proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoneEntry_proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .Vec3Data_proto S = 1;
  if (_internal_has_s()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::s(this),
        _Internal::s(this).GetCachedSize(), target, stream);
  }

  // optional .QuatData_proto Q = 2;
  if (_internal_has_q()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  // optional .Vec3Data_proto T = 3;
  if (_internal_has_t()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::t(this),
        _Internal::t(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoneEntry_proto)
  return target;
}

size_t BoneEntry_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoneEntry_proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Vec3Data_proto S = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.s_);
    }

    // optional .QuatData_proto Q = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.q_);
    }

    // optional .Vec3Data_proto T = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoneEntry_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BoneEntry_proto*>(
      &from));
}

void BoneEntry_proto::MergeFrom(const BoneEntry_proto& from) {
  BoneEntry_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:BoneEntry_proto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_s()->::Vec3Data_proto::MergeFrom(
          from._internal_s());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_q()->::QuatData_proto::MergeFrom(
          from._internal_q());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_t()->::Vec3Data_proto::MergeFrom(
          from._internal_t());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoneEntry_proto::CopyFrom(const BoneEntry_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoneEntry_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoneEntry_proto::IsInitialized() const {
  return true;
}

void BoneEntry_proto::InternalSwap(BoneEntry_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoneEntry_proto, _impl_.t_)
      + sizeof(BoneEntry_proto::_impl_.t_)
      - PROTOBUF_FIELD_OFFSET(BoneEntry_proto, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

std::string BoneEntry_proto::GetTypeName() const {
  return "BoneEntry_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BoneEntry_proto*
Arena::CreateMaybeMessage< ::BoneEntry_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BoneEntry_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
