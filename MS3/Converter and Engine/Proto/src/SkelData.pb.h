// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkelData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SkelData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SkelData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "SkelEntry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SkelData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SkelData_2eproto {
  static const uint32_t offsets[];
};
class SkelData_proto;
struct SkelData_protoDefaultTypeInternal;
extern SkelData_protoDefaultTypeInternal _SkelData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SkelData_proto* Arena::CreateMaybeMessage<::SkelData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SkelData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SkelData_proto) */ {
 public:
  inline SkelData_proto() : SkelData_proto(nullptr) {}
  ~SkelData_proto() override;
  explicit PROTOBUF_CONSTEXPR SkelData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkelData_proto(const SkelData_proto& from);
  SkelData_proto(SkelData_proto&& from) noexcept
    : SkelData_proto() {
    *this = ::std::move(from);
  }

  inline SkelData_proto& operator=(const SkelData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkelData_proto& operator=(SkelData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SkelData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkelData_proto* internal_default_instance() {
    return reinterpret_cast<const SkelData_proto*>(
               &_SkelData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SkelData_proto& a, SkelData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(SkelData_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkelData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkelData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkelData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SkelData_proto& from);
  void MergeFrom(const SkelData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SkelData_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SkelData_proto";
  }
  protected:
  explicit SkelData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoSkelEntryFieldNumber = 2,
    kNumBonesFieldNumber = 1,
  };
  // repeated .SkelEntry_proto poSkelEntry = 2;
  int poskelentry_size() const;
  private:
  int _internal_poskelentry_size() const;
  public:
  void clear_poskelentry();
  ::SkelEntry_proto* mutable_poskelentry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SkelEntry_proto >*
      mutable_poskelentry();
  private:
  const ::SkelEntry_proto& _internal_poskelentry(int index) const;
  ::SkelEntry_proto* _internal_add_poskelentry();
  public:
  const ::SkelEntry_proto& poskelentry(int index) const;
  ::SkelEntry_proto* add_poskelentry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SkelEntry_proto >&
      poskelentry() const;

  // optional uint32 numBones = 1;
  bool has_numbones() const;
  private:
  bool _internal_has_numbones() const;
  public:
  void clear_numbones();
  uint32_t numbones() const;
  void set_numbones(uint32_t value);
  private:
  uint32_t _internal_numbones() const;
  void _internal_set_numbones(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SkelData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SkelEntry_proto > poskelentry_;
    uint32_t numbones_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SkelData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SkelData_proto

// optional uint32 numBones = 1;
inline bool SkelData_proto::_internal_has_numbones() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SkelData_proto::has_numbones() const {
  return _internal_has_numbones();
}
inline void SkelData_proto::clear_numbones() {
  _impl_.numbones_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SkelData_proto::_internal_numbones() const {
  return _impl_.numbones_;
}
inline uint32_t SkelData_proto::numbones() const {
  // @@protoc_insertion_point(field_get:SkelData_proto.numBones)
  return _internal_numbones();
}
inline void SkelData_proto::_internal_set_numbones(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.numbones_ = value;
}
inline void SkelData_proto::set_numbones(uint32_t value) {
  _internal_set_numbones(value);
  // @@protoc_insertion_point(field_set:SkelData_proto.numBones)
}

// repeated .SkelEntry_proto poSkelEntry = 2;
inline int SkelData_proto::_internal_poskelentry_size() const {
  return _impl_.poskelentry_.size();
}
inline int SkelData_proto::poskelentry_size() const {
  return _internal_poskelentry_size();
}
inline ::SkelEntry_proto* SkelData_proto::mutable_poskelentry(int index) {
  // @@protoc_insertion_point(field_mutable:SkelData_proto.poSkelEntry)
  return _impl_.poskelentry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SkelEntry_proto >*
SkelData_proto::mutable_poskelentry() {
  // @@protoc_insertion_point(field_mutable_list:SkelData_proto.poSkelEntry)
  return &_impl_.poskelentry_;
}
inline const ::SkelEntry_proto& SkelData_proto::_internal_poskelentry(int index) const {
  return _impl_.poskelentry_.Get(index);
}
inline const ::SkelEntry_proto& SkelData_proto::poskelentry(int index) const {
  // @@protoc_insertion_point(field_get:SkelData_proto.poSkelEntry)
  return _internal_poskelentry(index);
}
inline ::SkelEntry_proto* SkelData_proto::_internal_add_poskelentry() {
  return _impl_.poskelentry_.Add();
}
inline ::SkelEntry_proto* SkelData_proto::add_poskelentry() {
  ::SkelEntry_proto* _add = _internal_add_poskelentry();
  // @@protoc_insertion_point(field_add:SkelData_proto.poSkelEntry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SkelEntry_proto >&
SkelData_proto::poskelentry() const {
  // @@protoc_insertion_point(field_list:SkelData_proto.poSkelEntry)
  return _impl_.poskelentry_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SkelData_2eproto
