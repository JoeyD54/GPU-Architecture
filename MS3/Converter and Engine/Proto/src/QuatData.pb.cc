// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuatData.proto

#include "QuatData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR QuatData_proto::QuatData_proto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.qx_)*/0
  , /*decltype(_impl_.qy_)*/0
  , /*decltype(_impl_.qz_)*/0
  , /*decltype(_impl_.qw_)*/0} {}
struct QuatData_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuatData_protoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuatData_protoDefaultTypeInternal() {}
  union {
    QuatData_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuatData_protoDefaultTypeInternal _QuatData_proto_default_instance_;

// ===================================================================

class QuatData_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<QuatData_proto>()._impl_._has_bits_);
  static void set_has_qx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_qz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qw(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

QuatData_proto::QuatData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QuatData_proto)
}
QuatData_proto::QuatData_proto(const QuatData_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  QuatData_proto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qx_){}
    , decltype(_impl_.qy_){}
    , decltype(_impl_.qz_){}
    , decltype(_impl_.qw_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.qx_, &from._impl_.qx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.qw_) -
    reinterpret_cast<char*>(&_impl_.qx_)) + sizeof(_impl_.qw_));
  // @@protoc_insertion_point(copy_constructor:QuatData_proto)
}

inline void QuatData_proto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qx_){0}
    , decltype(_impl_.qy_){0}
    , decltype(_impl_.qz_){0}
    , decltype(_impl_.qw_){0}
  };
}

QuatData_proto::~QuatData_proto() {
  // @@protoc_insertion_point(destructor:QuatData_proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuatData_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuatData_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuatData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:QuatData_proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.qx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.qw_) -
        reinterpret_cast<char*>(&_impl_.qx_)) + sizeof(_impl_.qw_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* QuatData_proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float qx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_qx(&has_bits);
          _impl_.qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float qy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_qy(&has_bits);
          _impl_.qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float qz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_qz(&has_bits);
          _impl_.qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float qw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_qw(&has_bits);
          _impl_.qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuatData_proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuatData_proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float qx = 1;
  if (_internal_has_qx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_qx(), target);
  }

  // optional float qy = 2;
  if (_internal_has_qy()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_qy(), target);
  }

  // optional float qz = 3;
  if (_internal_has_qz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_qz(), target);
  }

  // optional float qw = 4;
  if (_internal_has_qw()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_qw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuatData_proto)
  return target;
}

size_t QuatData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QuatData_proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float qx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float qy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float qz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float qw = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuatData_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const QuatData_proto*>(
      &from));
}

void QuatData_proto::MergeFrom(const QuatData_proto& from) {
  QuatData_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:QuatData_proto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.qx_ = from._impl_.qx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.qy_ = from._impl_.qy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.qz_ = from._impl_.qz_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.qw_ = from._impl_.qw_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void QuatData_proto::CopyFrom(const QuatData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QuatData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuatData_proto::IsInitialized() const {
  return true;
}

void QuatData_proto::InternalSwap(QuatData_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuatData_proto, _impl_.qw_)
      + sizeof(QuatData_proto::_impl_.qw_)
      - PROTOBUF_FIELD_OFFSET(QuatData_proto, _impl_.qx_)>(
          reinterpret_cast<char*>(&_impl_.qx_),
          reinterpret_cast<char*>(&other->_impl_.qx_));
}

std::string QuatData_proto::GetTypeName() const {
  return "QuatData_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::QuatData_proto*
Arena::CreateMaybeMessage< ::QuatData_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QuatData_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
